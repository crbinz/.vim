let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
nmap <buffer> <silent> 	 :call VotlToggleFolding()
nmap <buffer> <silent> ,,gf :call VotlFindTag(expand("<cword>"))
vmap <buffer> <silent> ,,gd :call VotlDeleteTags()
nmap <buffer> <silent> ,,gd :call VotlDeleteTags()
vmap <buffer> <silent> ,,gr :call VotlAlignTags()
nmap <buffer> <silent> ,,gr :call VotlAlignTags()
nmap <buffer> <silent> ,,W :call VotlToHtml()
map <buffer> <silent> ,,cu :call VotlComputeHowMuchDone(s:VotlFindRootParent(line(".")))
map <buffer> <silent> ,,cx :call VotlSwitchCheckbox()
map <buffer> <silent> ,,cP :call VotlDeleteCheckboxPercent()
map <buffer> <silent> ,,cp :call VotlInsertCheckboxPercent()
map <buffer> <silent> ,,cB :call VotlDeleteCheckbox()
map <buffer> <silent> ,,cb :call VotlInsertCheckbox()
nmap <buffer> <silent> ,,jt :call VotlGotoToday()
nmap <buffer> <silent> ,,jc :Calendar
nmap <buffer> <silent> ,,e :call VotlSpawn()
nmap <buffer> <silent> ,,0 :set foldlevel=99999
nmap <buffer> <silent> ,,9 :set foldlevel=8
nmap <buffer> <silent> ,,8 :set foldlevel=7
nmap <buffer> <silent> ,,7 :set foldlevel=6
nmap <buffer> <silent> ,,6 :set foldlevel=5
nmap <buffer> <silent> ,,5 :set foldlevel=4
nmap <buffer> <silent> ,,4 :set foldlevel=3
nmap <buffer> <silent> ,,3 :set foldlevel=2
nmap <buffer> <silent> ,,2 :set foldlevel=1
nmap <buffer> <silent> ,,1 :set foldlevel=0
nmap <buffer> <silent> ,,B :%s/\(^\t*\):/\1/e:let @/=""
nmap <buffer> <silent> ,,b :%s/\(^\t*\):/\1/e:%s/\(^\t*\) /\1: /e:let @/=""
nmap <buffer> <silent> ,,- o----------------------------------------
nmap <buffer> <silent> ,,S :call VotlSortChildren(1)
nmap <buffer> <silent> ,,s :call VotlSortChildren(0)
nmap <buffer> <silent> ,,X :call VotlInsertDateTime(1, 2)
nmap <buffer> <silent> ,,x :call VotlInsertDateTime(0, 2)
nmap <buffer> <silent> ,,T :call VotlInsertDateTime(1, 1)
nmap <buffer> <silent> ,,t :call VotlInsertDateTime(0, 1)
nmap <buffer> <silent> ,,D :call VotlInsertDateTime(1, 0)
nmap <buffer> <silent> ,,d :call VotlInsertDateTime(0, 0)
nmap <buffer> <silent> [[ :call cursor(VotlPrevParent(), 0)^
nmap <buffer> <silent> ]] :call cursor(VotlNextParent(), 0)^
nmap <buffer> <silent> { :call cursor(VotlPrevSibling(), 0)^
nmap <buffer> <silent> } :call cursor(VotlNextSibling(), 0)^
imap <buffer> <silent> ,,w :wa
imap <buffer> <silent> ,,- o----------------------------------------
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO::\ -,mO::\ \ ,eO:::,::,sO:>\ -,mO:>\ \ ,eO:>>,:>
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=nc
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'votl'
setlocal filetype=votl
endif
setlocal foldcolumn=1
setlocal foldenable
setlocal foldexpr=VotlFoldLevel(v:lnum)
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=VotlFoldText()
setlocal formatexpr=
setlocal formatoptions=crqno
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,39,45,48-57,_,129-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!Pl#Statusline(0,1)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'votl'
setlocal syntax=votl
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
129
normal zo
130
normal zo
130
normal zo
133
normal zo
134
normal zo
135
normal zo
136
normal zo
136
normal zo
138
normal zo
138
normal zo
135
normal zo
136
normal zo
137
normal zo
137
normal zo
137
normal zo
138
normal zo
139
normal zo
138
normal zo
136
normal zo
138
normal zo
139
normal zo
138
normal zo
139
normal zo
133
normal zo
150
normal zo
129
normal zo
161
normal zo
162
normal zo
164
normal zo
165
normal zo
166
normal zo
165
normal zo
164
normal zo
161
normal zo
167
normal zo
let s:l = 135 - ((134 * winheight(0) + 32) / 64)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
135
normal! 02l
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
